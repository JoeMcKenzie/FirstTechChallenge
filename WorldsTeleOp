package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DistanceSensor;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.TouchSensor;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.IMU;
import com.qualcomm.hardware.rev.RevHubOrientationOnRobot;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;


@TeleOp(name= "Worlds")

public class Help extends LinearOpMode {
    private DcMotor leftFront,leftBack,rightFront,rightBack;
    private DcMotor slide;
    private DcMotor climb;
    private DcMotor plane;
    private DcMotor intakeMotor;

    private Servo latch, boxWrist, intakeWrist,pixel; //, boxWrist
    private CRServo intake, belt; // belt is orange pass through thing
    private ColorSensor color;
    private DistanceSensor distance;
    
    private IMU imu;
    private TouchSensor magnet;
    
    int incounter = 0;
    int outcounter = 0;
    int intakeTimer = 0;
    int otherIntakeTimer = 1;
    double newPos = .46;
    double intakePos = .54974444444;
    int slidePos = 0;
    @Override
    public void runOpMode(){
        initialize();
        waitForStart();
        
        while(opModeIsActive()){
            moveRobot();
            moveSlide();
            shootDrone();
            moveHook();
            intakePixels();
            //moveBox();
            movePaintRoller();
            moveLatch();
            moveIntakeWrist();
            telemetry.addLine("Paint" + latch.getPosition());
            telemetry.addLine("Outake: " + newPos);
            // telemetry.addLine("Intake: " + intakePos);
            telemetry.addLine("Climb: " + climb.getCurrentPosition());
            telemetry.addLine("Slide: " + slide.getCurrentPosition());
            //telemetry.addData("Distance: ", distance.getDistance(DistanceUnit.CM));
            //telemetry.addData("RGB: ", color.red() + " " + color.green() + " " + color.blue());
            
            telemetry.update();
            if(gamepad1.touchpad) pixel.setPosition(0);
            
            
        }
    }
    
    public void moveRobot(){
        double y = -gamepad1.left_stick_y;
        double x = gamepad1.left_stick_x * 1.1;
        double rx = -gamepad1.right_stick_x;
        
        
        
        
        double denominator = Math.max(Math.abs(y) + Math.abs(x) + Math.abs(rx), 1);
        double frontLeftPower = (y + x + rx) / denominator;
        double backLeftPower = (y - x + rx) / denominator;
        double frontRightPower = (y - x - rx) / denominator;
        double backRightPower = (y + x - rx) / denominator;
        leftFront.setPower(frontLeftPower * 0.8);
        leftBack.setPower(backLeftPower * 0.8);
        rightFront.setPower(frontRightPower * 0.8);
        rightBack.setPower(backRightPower * 0.8);
    }
    
    public void initialize(){
        leftFront = hardwareMap.get(DcMotor.class, "leftFront");
        leftBack = hardwareMap.get(DcMotor.class, "leftBack");
        rightFront = hardwareMap.get(DcMotor.class, "rightFront");
        rightBack = hardwareMap.get(DcMotor.class, "rightBack");
        slide = hardwareMap.get(DcMotor.class, "slide");
        
        climb = hardwareMap.get(DcMotor.class, "climb");
        plane = hardwareMap.get(DcMotor.class, "plane");
        intakeMotor = hardwareMap.get(DcMotor.class, "intakeMotor");
        
        pixel = hardwareMap.get(Servo.class, "pixel");
        
        rightFront.setDirection(DcMotor.Direction.REVERSE);
        rightBack.setDirection(DcMotor.Direction.REVERSE);
        
        climb.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        climb.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        slide.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        slide.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        
        
        latch = hardwareMap.get(Servo.class, "latch");
        boxWrist = hardwareMap.get(Servo.class, "boxWrist");
        intakeWrist = hardwareMap.get(Servo.class, "intakeWrist");
        intakeWrist.setPosition(.54974444444);
        // boxWrist.setPosition(.47);
    
        intake = hardwareMap.get(CRServo.class, "intake");
        belt = hardwareMap.get(CRServo.class, "belt");

        imu = hardwareMap.get(IMU.class, "imu");
        RevHubOrientationOnRobot orientationOnRobot = new RevHubOrientationOnRobot(RevHubOrientationOnRobot.LogoFacingDirection.RIGHT
                ,RevHubOrientationOnRobot.UsbFacingDirection.FORWARD);
        imu.initialize(new IMU.Parameters(orientationOnRobot));

        //color = hardwareMap.get(ColorSensor.class, "beltSensor");
        //distance = hardwareMap.get(DistanceSensor.class, "beltSensor");
        
    }
    
    public void moveSlide(){
        if (Math.abs(gamepad2.left_stick_y) > .1) {
            slide.setPower(-gamepad2.left_stick_y);
        } 
        else if (Math.abs(gamepad1.right_stick_y) > .9999999) {
            slide.setPower(-gamepad1.right_stick_y);
        }    
        else {
            slide.setPower(0);
        }
    }
    
    public void shootDrone() {
        if(gamepad1.x) {
            plane.setPower(1); //Literally just shoots the drone by turning on motors
        }
        else {
            plane.setPower(0);
        }
    }
    
    public void moveHook() {
        if(gamepad1.b){
            climb.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        climb.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        
        }
        if((gamepad1.right_trigger > 0.5) || (gamepad2.right_trigger > 0.5)) { //Lifts hook up
            if(!(climb.getCurrentPosition() > 6547)) climb.setPower(1);
        }
        else if(gamepad1.left_trigger > 0.5 || (gamepad2.left_trigger > 0.5)) {
            climb.setPower(-1);
        }
        else {
            climb.setPower(0);
        }
    }
    
    public void intakePixels() {
        if (gamepad1.left_bumper) { //(OUTTAKE pixel by moving belt and surgical tubing)
            intakeMotor.setPower(-.6);
            belt.setPower(1);
        }
        else if (gamepad1.right_bumper) { //INTAKE belt and surgical tubing
            intakeMotor.setPower(.8);
            belt.setPower(-1);
        }
        else {
            intakeMotor.setPower(0);
            belt.setPower(0);
        }
        // if (gamepad1.right_bumper) {
        //     incounter++;
        // }
        // if (gamepad1.left_bumper) {
        //     outcounter++;
        // }
        // if (incounter % 2 == 0 && incounter != 0) {
        //     intake.setPower(-1);
        //     belt.setPower(1);
        // }
        // if (incounter % 2 != 0) {
        //     intake.setPower(0);
        //     belt.setPower(0);
        // }
        // if (outcounter % 2 == 0 && outcounter != 0) {
        //     intake.setPower(1);
        //     belt.setPower(-1);
        // }
        // if (outcounter % 2 != 0) {
        //     intake.setPower(0);
        //     belt.setPower(0);
        // }
    }
    
    // public void moveBox() {
    //     if (gamepad2.right_bumper) { //Rotates box down so pixels can fall into bottom of box
    //         boxWrist.setPosition(0.315);
    //     }
    //     else if (gamepad2.left_bumper) { //Stows box
    //         boxWrist.setPosition(0.65);
    //     }
    //     else if (gamepad2.a) { //Intake position
    //         boxWrist.setPosition(0.30);
    //     }
    //     else if (gamepad2.y) {
    //         boxWrist.setPosition(0.35); //Drop pixels position
    //     }
    // }
    
    public void movePaintRoller() {
        if (gamepad2.right_bumper || gamepad1.a) { //Rotates box down so pixels can fall into bottom of box
            boxWrist.setPosition(boxWrist.getPosition() - 0.0001);
        }
        else if (gamepad2.left_bumper || gamepad1.y) { //Stows box
            boxWrist.setPosition(boxWrist.getPosition() + 0.0001);
        }
        else if (gamepad2.a) { //Intake position
            boxWrist.setPosition(.48888888888888);
        }
        // else if (gamepad2.x) {
        //     newPos = boxWrist.getPosition();
            
        // }
        else if (gamepad2.y) {
            boxWrist.setPosition(0.1333333333333); //Drop pixels position
        }
        else if (gamepad2.x) {
            slidePos = slide.getCurrentPosition();
        }
        else if (gamepad2.b) {
            if(gamepad2.left_stick_y == 0){
                if (slide.getCurrentPosition() <= slidePos) {
                    slide.setPower(1);
                    //slide.runToPosition(slidePos);
                    if (latch.getPosition() != 0.0)
                        latch.setPosition(0.0);
                    if (boxWrist.getPosition() != .4888888888888)
                        boxWrist.setPosition(.4888888888888);
                }
                else if (slide.getCurrentPosition() > slidePos) {
                    latch.setPosition(0.0);
                    boxWrist.setPosition(.4888888888888);
                    slide.setPower(-1);
                    //slide.runToPosition(slidePos);
                }
            }
            // if (slide.getPosition() <= slidePos) {
            //     latch.setPosition(0.0);
            //     slide.runToPosition(slidePos);
            //     boxWrist.setPosition(.4888888888888);
            //     slide.get
            // }
        }
    }
    
    public void moveLatch() {
        if (gamepad2.dpad_up) { //Latch moves to drop ALL PIXELS
            latch.setPosition(0.0); // 0.15
        }
        else if (gamepad2.dpad_right) { //Latch moves to drop ONE PIXEL
            latch.setPosition(.22); // .313
        }
        else if (gamepad2.dpad_left) { //Latch at FULL EXTENSIONxx
            latch.setPosition(0.52); // 0.55
        }
        else if (gamepad2.dpad_down) { //Latch at FULL EXTENSIONxx
            latch.setPosition(1); // 1
        }
    }
    
    public void moveIntakeWrist() {
        if (gamepad1.dpad_right) { //Intake position
            // intakeWrist.setPosition(.13736666666666);
            intakeWrist.setPosition(.605322222222);
        }
        if (gamepad1.y) {
                intakeWrist.setPosition(.82);
            }
        if (gamepad1.a) {
            intakeWrist.setPosition(.5105);
        }
        else if (gamepad1.dpad_left){ //Stow position
            // intakeWrist.setPosition(.1047555555555555);
            intakeWrist.setPosition(.75);
            intakeTimer++;
            }
            
        // else if (gamepad1.dpad_down){ //Moves star thingy down
        //     intakeWrist.setPosition(0.16);
        // }
        // else if (gamepad1.dpad_up){ //Moves star thingy up
        //     intakeWrist.setPosition(0.08);
        // }
        if (gamepad1.dpad_down) {
            intakeWrist.setPosition(intakeWrist.getPosition() - .0003);
            intakePos = intakeWrist.getPosition() - .0003;
        }
        if (gamepad1.dpad_up) {
            intakeWrist.setPosition(intakeWrist.getPosition() + .0003);
            intakePos = intakeWrist.getPosition() + .0003;
        }
    }
}
